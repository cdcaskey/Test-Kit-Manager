@page
@model TestKitManager.Pages.Services.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Service</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Service.Id" />
            <div class="form-group">
                <label asp-for="Service.Name" class="control-label"></label>
                <input asp-for="Service.Name" class="form-control" />
                <span asp-validation-for="Service.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Service.Version" class="control-label"></label>
                <input asp-for="Service.Version" class="form-control" />
                <span asp-validation-for="Service.Version" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Service.LocationId" class="control-label"></label>
                <select asp-for="Service.LocationId" class="form-control" asp-items="Model.Locations"></select>
                <span asp-validation-for="Service.LocationId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="@nameof(Model.Upload)" class="control-label">Config File</label>
                <br />
                @if(Model.Service.HasConfig)
                {
                    <div class="input-group changeConfig">
                        <input type="text" class="form-control" id="ConfigFileName" placeholder="@Model.Service.ConfigFileName" aria-label="Existing Config File: @Model.Service.ConfigFileName" readonly>
                        <button class="btn btn-outline-secondary" type="button" id="ChangeConfig">Change</button>
                        <button class="btn btn-outline-danger" type="button" id="ToggleConfigButton">Delete</button>
                    </div>
                    <input type="hidden" asp-for="DeleteConfig" />
                    <input type="hidden" id="OriginalConfigFileName" value="@Model.Service.ConfigFileName" />

                    <div class="input-group uploadConfig d-none">
                        <input type="file" asp-for="Upload" class="form-control uploadConfig d-none" />
                        <button class="btn btn-outline-danger" type="button" id="CancelUpload">Cancel</button>
                    </div>

                    <span asp-validation-for="Upload" class="text-danger uploadConfig d-none"></span>
                }
                else
                {
                    
                    <div class="input-group uploadConfig">
                        <input type="file" asp-for="Upload" class="form-control uploadConfig" />
                        <button class="btn btn-outline-danger" type="button" id="CancelUpload">Cancel</button>
                    </div>
                    <span asp-validation-for="Upload" class="text-danger uploadConfig"></span>
                }
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="./Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $('#ChangeConfig').click(function() {
            $('.uploadConfig').removeClass('d-none');
            $('.changeConfig').addClass('d-none');
        });
        
        $('#ToggleConfigButton').click(function() {
            let deleteConfig = $('#DeleteConfig');

            // Toggle the value of DeleteConfig and setup the button accordingly
            if (deleteConfig.val() == 'true') {
                deleteConfig.val('false');

                $(this).addClass("btn-outline-danger");
                $(this).removeClass("btn-outline-success");

                $(this).html("Delete");
                $('#ConfigFileName').attr('placeholder', $('#OriginalConfigFileName').val());
            }
            else {
                deleteConfig.val('true');

                $(this).addClass("btn-outline-success");
                $(this).removeClass("btn-outline-danger");

                $(this).html("Undo");
                $('#ConfigFileName').attr('placeholder', "Deleted");
            }
        });

        $('#CancelUpload').click(function() {
            let originalConfig = $('#OriginalConfigFileName').val();

            // Clear Selected File
            $('#Upload').val('');
            
            // Re-show original config if there was one
            if (originalConfig)
            {
                $('.uploadConfig').addClass('d-none');
                $('.changeConfig').removeClass('d-none');
            }
        });
    </script>
}
