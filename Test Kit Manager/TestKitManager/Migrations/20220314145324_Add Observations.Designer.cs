// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestKitManager.Data;

#nullable disable

namespace TestKitManager.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220314145324_Add Observations")]
    partial class AddObservations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("MachineObservation", b =>
                {
                    b.Property<int>("MachinesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObservationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MachinesId", "ObservationsId");

                    b.HasIndex("ObservationsId");

                    b.ToTable("MachineObservation");
                });

            modelBuilder.Entity("ObservationService", b =>
                {
                    b.Property<int>("ObservationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServicesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObservationsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ObservationService");
                });

            modelBuilder.Entity("TestKitManager.Pages.Machines.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddresses")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("TestKitManager.Pages.Observations.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThirdPartyIssue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("TestKitManager.Pages.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigFileContent")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MachineObservation", b =>
                {
                    b.HasOne("TestKitManager.Pages.Machines.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestKitManager.Pages.Observations.Observation", null)
                        .WithMany()
                        .HasForeignKey("ObservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObservationService", b =>
                {
                    b.HasOne("TestKitManager.Pages.Observations.Observation", null)
                        .WithMany()
                        .HasForeignKey("ObservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestKitManager.Pages.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestKitManager.Pages.Services.Service", b =>
                {
                    b.HasOne("TestKitManager.Pages.Machines.Machine", "Location")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TestKitManager.Pages.Machines.Machine", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
